generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model SyncOperation {
  id        String   @id @default(uuid())
  timestamp BigInt
  type      String   // 'create' | 'update' | 'delete'
  entity    String   // 'product' | 'transaction' | 'cashRegister'
  data      String   // JSON serializado
  deviceId  String
  status    String   // 'pending' | 'completed' | 'failed'
  createdAt DateTime @default(now())
  userId    String?  // Nuevo: referencia al usuario que realizó la operación
  user      User?    @relation(fields: [userId], references: [id])
}

model Product {
    id              Int       @id @default(autoincrement())
    name            String
    supplier        Supplier? @relation(fields: [supplierId], references: [id])
    supplierId      Int?
    cost            Float
    price           Float
    stock           Int
    category        String?
    barcode         String?   @unique
    minStock        Int?
    imageUrl        String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    createdBy       String    
    updatedBy       String    
    creator         User      @relation("ProductCreator", fields: [createdBy], references: [id])
    updater         User      @relation("ProductUpdater", fields: [updatedBy], references: [id])
    auditLogs       AuditLog[] 
    isActive        Boolean   @default(true)
    // Relaciones
    transactionItems TransactionItem[]
    prepaidProducts PrepaidProduct[]
    accountItems    AccountTransactionItem[]
    salesRecords         SalesRecord[]
}

model Transaction {
    id            Int               @id @default(autoincrement())
    amount        Float
    discount      Float             @default(0)
    type          String    
    deviceId      String
    createdAt     DateTime         @default(now())
    customerName  String?
    userId        String    
    user          User             @relation(fields: [userId], references: [id])
    status        String           @default("active")
    items         TransactionItem[]
    currency      String           @default("USD")   // "USD" | "BS"
    wallet        String           @default("CASH_USD")  // "CASH_USD" | "CASH_BS" | "TRANSFER_USD" | "CUENTA_BS"
}

model TransactionItem {
    id            Int         @id @default(autoincrement())
    transactionId Int
    productId     Int
    quantity      Int
    price         Float
    transaction   Transaction @relation(fields: [transactionId], references: [id])
    product       Product     @relation(fields: [productId], references: [id])
}

model CashRegister {
    id            Int       @id @default(autoincrement())
    status        String    // 'open' | 'closed'
    initialCashUSD     Float    @default(0)
    initialCashBs      Float    @default(0)
    initialTransferUSD Float    @default(0)
    initialCuentaBs    Float    @default(0)
    finalCashUSD       Float?
    finalCashBs        Float?
    finalTransferUSD   Float?
    finalCuentaBs      Float?
    dollarRate         Float    @default(0)
    openedAt      DateTime  @default(now())
    closedAt      DateTime?
    deviceId      String    
    userId        String    
    user          User      @relation(fields: [userId], references: [id])
}


model User {
  id            String    @id @default(uuid())
  cedula        String    @unique
  name          String
  passwordHash  String
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        Int
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relaciones
  syncOperations    SyncOperation[]
  transactions      Transaction[]
  cashRegisters     CashRegister[]
  productsCreated   Product[]      @relation("ProductCreator")
  productsUpdated   Product[]      @relation("ProductUpdater")
  auditLogs         AuditLog[]

  accountsCreated   Account[]  @relation("AccountCreator")
  accountsClosed    Account[]  @relation("AccountCloser")
  accountTransactions AccountTransaction[]
  salesRecords         SalesRecord[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique // 'admin' | 'user'
  permissions String[] // Array de permisos
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
    id        String   @id @default(uuid())
    action    String   // 'create' | 'update' | 'delete'
    entity    String   // Nombre de la entidad afectada
    entityId  String   // ID de la entidad afectada
    changes   String   // JSON con los cambios realizados
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    productId Int?     // Opcional: referencia específica a producto si aplica
    product   Product? @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
}

model Supplier {
    id          Int       @id @default(autoincrement())
    fiscalName  String
    tradeName   String
    contact     String?
    phone       String?
    email       String?
    taxId       String?   // RIF/NIF
    address     String?
    notes       String?
    active      Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    products    Product[]
}

enum AccountType {
    PREPAID
    ACCUMULATED
}

model Account {
    id            Int       @id @default(autoincrement())
    type          AccountType
    customerName  String
    status        String    // "open" | "closed"
    openedAt      DateTime  @default(now())
    closedAt      DateTime?
    creditLimit   Float?    // Solo para ACCUMULATED
    createdBy     String    
    closedBy      String?   
    creator       User      @relation("AccountCreator", fields: [createdBy], references: [id])
    closer        User?     @relation("AccountCloser", fields: [closedBy], references: [id])
    products      PrepaidProduct[]
    transactions  AccountTransaction[]
}

model PrepaidProduct {
    id          Int      @id @default(autoincrement())
    accountId   Int
    productId   Int
    paid        Int      // cantidad pagada
    consumed    Int      // cantidad consumida
    account     Account  @relation(fields: [accountId], references: [id])
    product     Product  @relation(fields: [productId], references: [id])
}

model AccountTransaction {
    id          String    @id @default(uuid())
    accountId   Int
    amount      Float
    type        String    @db.VarChar(10)
    method      String?   // "cash" | "card" | "transfer"
    discount    Float     @default(0)
    note        String?
    status      String    @default("active")  // 'active' | 'cancelled'
    createdAt   DateTime  @default(now())
    userId      String    
    user        User      @relation(fields: [userId], references: [id])
    account     Account   @relation(fields: [accountId], references: [id])
    items       AccountTransactionItem[]
    cancelledTransactionId String?
}

model AccountTransactionItem {
    id            Int       @id @default(autoincrement())
    transactionId String
    productId     Int
    quantity      Int
    price         Float
    transaction   AccountTransaction @relation(fields: [transactionId], references: [id])
    product       Product            @relation(fields: [productId], references: [id])
}

model SalesRecord {
    id          String    @id @default(uuid())
    productId   Int
    product     Product   @relation(fields: [productId], references: [id])
    quantity    Int
    price       Float
    total       Float
    source      String    // "POS" | "ACCUMULATED" | "PREPAID"
    sourceId    String    // ID de la transacción original
    createdAt   DateTime  @default(now())
    userId      String
    user        User      @relation(fields: [userId], references: [id])

    @@unique([sourceId, source])
}