generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos existentes con algunas mejoras
model SyncOperation {
  id        String   @id @default(uuid())
  timestamp BigInt
  type      String   // 'create' | 'update' | 'delete'
  entity    String   // 'product' | 'transaction' | 'cashRegister'
  data      String   // JSON serializado
  deviceId  String
  status    String   // 'pending' | 'completed' | 'failed'
  createdAt DateTime @default(now())
  userId    String?  // Nuevo: referencia al usuario que realizó la operación
  user      User?    @relation(fields: [userId], references: [id])
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String
    supplier    Supplier? @relation(fields: [supplierId], references: [id])
    supplierId  Int?
    cost        Float
    price       Float
    stock       Int
    category    String?
    barcode     String?  @unique
    minStock    Int?
    imageUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   String    
    updatedBy   String    
    creator     User      @relation("ProductCreator", fields: [createdBy], references: [id])
    updater     User      @relation("ProductUpdater", fields: [updatedBy], references: [id])
}

model Transaction {
  id           Int      @id @default(autoincrement())
  amount       Float
  type         String   // PaymentMethod: 'cash' | 'card' | 'transfer'
  createdAt    DateTime @default(now())
  deviceId     String
  customerName String?
  userId       String   // Nuevo: referencia al usuario que realizó la transacción
  user         User     @relation(fields: [userId], references: [id])
}

model CashRegister {
  id            Int       @id @default(autoincrement())
  status        String    // 'open' | 'closed'
  initialAmount Float
  finalAmount   Float?
  openedAt      DateTime  @default(now())
  closedAt      DateTime?
  deviceId      String
  userId        String    // Nuevo: referencia al usuario que opera la caja
  user          User      @relation(fields: [userId], references: [id])
}

// Nuevos modelos para autenticación y auditoría
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  passwordHash  String
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        Int
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relaciones
  syncOperations    SyncOperation[]
  transactions      Transaction[]
  cashRegisters     CashRegister[]
  productsCreated   Product[]      @relation("ProductCreator")
  productsUpdated   Product[]      @relation("ProductUpdater")
  auditLogs         AuditLog[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique // 'admin' | 'user'
  permissions String[] // Array de permisos
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String   // 'create' | 'update' | 'delete'
  entity    String   // Nombre de la entidad afectada
  entityId  String   // ID de la entidad afectada
  changes   String   // JSON con los cambios realizados
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId Int?     // Opcional: referencia específica a producto si aplica
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Supplier {
    id          Int       @id @default(autoincrement())
    fiscalName  String
    tradeName   String
    contact     String?
    phone       String?
    email       String?
    taxId       String?   // RIF/NIF
    address     String?
    notes       String?
    active      Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    products    Product[]
}